using OneOf;
using TrueLayer.Common;
using TrueLayer.Serialization;

namespace TrueLayer.Payments.Model;

using UltimateCounterpartyUnion = OneOf<SubMerchants.BusinessDivision, SubMerchants.BusinessClient>;

/// <summary>
/// Represents sub-merchants information for payment requests
/// </summary>
public class SubMerchants
{
    /// <summary>
    /// Creates a new <see cref="SubMerchants"/> instance
    /// </summary>
    /// <param name="ultimateCounterparty">The ultimate counterparty information</param>
    public SubMerchants(UltimateCounterpartyUnion ultimateCounterparty)
    {
        UltimateCounterparty = ultimateCounterparty;
    }

    /// <summary>
    /// Gets the ultimate counterparty information
    /// </summary>
    public UltimateCounterpartyUnion UltimateCounterparty { get; }

    /// <summary>
    /// Represents a business division counterparty
    /// </summary>
    [JsonDiscriminator("business_division")]
    public class BusinessDivision
    {
        /// <summary>
        /// Creates a new <see cref="BusinessDivision"/> instance
        /// </summary>
        /// <param name="id">UUID generated by you</param>
        /// <param name="name">Name of the division</param>
        public BusinessDivision(string id, string name)
        {
            Type = "business_division";
            Id = id.NotNullOrWhiteSpace(nameof(id));
            Name = name.NotNullOrWhiteSpace(nameof(name));
        }

        /// <summary>
        /// Gets the type of the counterparty
        /// </summary>
        public string Type { get; }

        /// <summary>
        /// Gets the UUID generated by you
        /// </summary>
        public string Id { get; }

        /// <summary>
        /// Gets the name of the division
        /// </summary>
        public string Name { get; }
    }

    /// <summary>
    /// Represents a business client counterparty
    /// </summary>
    [JsonDiscriminator("business_client")]
    public class BusinessClient
    {
        /// <summary>
        /// Creates a new <see cref="BusinessClient"/> instance
        /// </summary>
        /// <param name="tradingName">Trading name of the merchant</param>
        /// <param name="commercialName">Commercial name different from trading name (optional)</param>
        /// <param name="url">Business website URL (optional)</param>
        /// <param name="mcc">Merchant category code (optional)</param>
        /// <param name="registrationNumber">Business registration number (optional if address provided)</param>
        /// <param name="address">Business address (optional)</param>
        public BusinessClient(
            string tradingName,
            string? commercialName = null,
            string? url = null,
            string? mcc = null,
            string? registrationNumber = null,
            Address? address = null)
        {
            Type = "business_client";
            TradingName = tradingName.NotNullOrWhiteSpace(nameof(tradingName));
            CommercialName = commercialName.NotEmptyOrWhiteSpace(nameof(commercialName));
            Url = url.NotEmptyOrWhiteSpace(nameof(url));
            Mcc = mcc.NotEmptyOrWhiteSpace(nameof(mcc));
            RegistrationNumber = registrationNumber.NotEmptyOrWhiteSpace(nameof(registrationNumber));
            Address = address;
        }

        /// <summary>
        /// Gets the type of the counterparty
        /// </summary>
        public string Type { get; }

        /// <summary>
        /// Gets the trading name of the merchant
        /// </summary>
        public string TradingName { get; }

        /// <summary>
        /// Gets the commercial name different from trading name
        /// </summary>
        public string? CommercialName { get; }

        /// <summary>
        /// Gets the business website URL
        /// </summary>
        public string? Url { get; }

        /// <summary>
        /// Gets the merchant category code
        /// </summary>
        public string? Mcc { get; }

        /// <summary>
        /// Gets the business registration number
        /// </summary>
        public string? RegistrationNumber { get; }

        /// <summary>
        /// Gets the business address
        /// </summary>
        public Address? Address { get; }
    }
}